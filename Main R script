options("repos"= c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))
options(BioC_mirror="http://mirrors.ustc.edu.cn/bioc/")
BiocManager::install("TCGAbiolinks")
library(TCGAbiolinks)
#临床数据下载
clinical <- GDCquery(project = "TCGA-LUAD", 
                     data.category = "Clinical", 
                     file.type = "xml")

GDCdownload(clinical)
cliquery <- GDCprepare_clinic(clinical, clinical.info = "patient")
colnames(cliquery)[1] <- "Tumor_Sample_Barcode"  ###临床信息下载完毕
#mRNA表达数据下载
query <- GDCquery(project = "TCGA-LUAD",
                  data.category = "Transcriptome Profiling",
                  data.type = "Gene Expression Quantification",
                  workflow.type = "HTSeq - Counts")
GDCdownload(query,
            method = "api",
            files.per.chunk = 100) 
expression_data <- GDCprepare(query = query)
library(DT)
library(dplyr)
library(SummarizedExperiment)
count_data <- assay(expression_data)  ####下载完成，等待DeSeq2标准化
class(count_data)
save(count_data,file="LUAD_mRNA_raw.Rdata")

exprSet <- as.data.frame(count_data)
exprSet <- as.data.frame(exprSet[,-23])######减除没有突变信息的样本
text <- as.data.frame(colnames(exprSet))
save(exprSet,file="LUAD_mRNA_raw_2.Rdata")

metadata= data.table::fread(file = "tp53_input.csv") 
metadata<- metadata[-1,]
colnames(metadata) <- c("TCGA_id","sample")
sample <- factor(metadata$sample,levels = c("wt","mut"),ordered = F)
table(sample)
library(DESeq2)
exprSet <- as.matrix(exprSet)
dds <-DESeqDataSetFromMatrix(countData=exprSet, 
                             colData=metadata, 
                             design=~sample,
                             tidy=T)
nrow(dds)
### 如果一个基因在所有样本中的counts数小于等于1，我们就把他删掉
dds <- dds[rowSums(counts(dds))>1,]
nrow(dds)
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, "sample")

exprSet_vst <- as.data.frame(assay(vsd))
test <- exprSet_vst[1:10,1:10]

library(dplyr)
library(tibble)
library(tidyr)

### 最困难的一步来了，DESeq2主程序
dds <- DESeq(dds)
save(dds,file = "dds.Rdata")
### 使用counts函数提取标准化后的数据，用于展示差异表达结果，注意跟热图不一样！！
normalized_counts <- as.data.frame(counts(dds, normalized=TRUE))
save(normalized_counts,file = "normalized_counts.Rdata")




load("expr.Rdata")
clii$n <- gsub("X","0",clii$n)
clii$n <- gsub("2","1",clii$n)
clii$n <- gsub("0","negative",clii$n)
clii$n <- gsub("1","positive",clii$n)
clii$n <- gsub("3","positive",clii$n)
expr <- expr[-1,]

library(pheatmap)
a<-pheatmap(try, #热图的数据
         cluster_rows = F,#行聚类
         cluster_cols = T,#列聚类，可以看出样本之间的区分度
         cutree_cols=4,
         annotation_col =annot, #标注样本分类
         annotation_legend=TRUE, # 显示注释
         border_color=NA,
         show_rownames = T,# 显示行名
         show_colnames = T,
         color =colorRampPalette(c("green", "black","red"))(100)#调色
)
iidd <- as.data.frame(a[["gtable"]][["grobs"]][[3]][["label"]])
colnames(iidd) <- "ID"
cluster1 <- as.data.frame(iidd[1:145,])
group <- rep("cluster_1",145)
cluster1 <- cbind(cluster1,group)
colnames(cluster1) <-c("ID","group")
cluster2 <-as.data.frame(iidd[146:170,])
group <- rep("cluster_2",25)
cluster2 <- cbind(cluster2,group)
colnames(cluster2) <-c("ID","group")
cluster3<- as.data.frame(iidd[171:259,])
group <- rep("cluster_3",89)
cluster3 <- cbind(cluster3,group)
colnames(cluster3) <-c("ID","group")
cluster4<-as.data.frame(iidd[260:506,])
group <- rep("cluster_4",247)
cluster4 <- cbind(cluster4,group)
colnames(cluster4) <-c("ID","group")
########
library("survival")
library("survminer")
write.csv(clii,file = "sur.csv")

sur<- read.csv("sur.csv",header = T)
sur <- cbind(as.data.frame(sur$ID),as.data.frame(sur$status),as.data.frame(sur$months))
colnames(sur) <- c("ID","status","months")
library(dplyr)
cluster1 <- inner_join(cluster1,sur,by="ID")
cluster2 <- inner_join(cluster2,sur,by="ID")
cluster3 <- inner_join(cluster3,sur,by="ID")
cluster4 <- inner_join(cluster4,sur,by="ID")

svData<- rbind(cluster1,cluster2,cluster3,cluster4)
unique(svData$group)
svData$group <- factor(svData$group, levels = c("cluster_1","cluster_2","cluster_3","cluster_4"))
fit <- survfit(Surv(months,status) ~ group, data = svData)
ggsurvplot(fit)
##########
mcp <- as.data.frame(t(ExampleEstimates))
rn <- as.data.frame(rownames(mcp))
colnames(rn) <- "ID"
mcp <- cbind(rn,mcp)
mcp<- inner_join(sur,mcp,by="ID")
mcp <- arrange(mcp,mcp$`T cells`)
T_cells_exp <- c(rep("low",200),rep("high",200))
mcp <- cbind(mcp,T_cells_exp)

mcp <- arrange(mcp,mcp$`CD8 T cells`)
CD8T_cells_exp <- c(rep("low",200),rep("high",200))
mcp <- cbind(mcp,CD8T_cells_exp)

mcp <- arrange(mcp,mcp$`Cytotoxic lymphocytes`)
Cytotoxic_exp <- c(rep("low",200),rep("high",200))
mcp <- cbind(mcp,Cytotoxic_exp)

mcp <- arrange(mcp,mcp$`B lineage`)
B_lineage_exp <- c(rep("low",70),rep("high",330))
mcp <- cbind(mcp,B_lineage_exp)

mcp <- arrange(mcp,mcp$`NK cells`)
NK_cells_exp <- c(rep("low",200),rep("high",200))
mcp <- cbind(mcp,NK_cells_exp)

mcp <- arrange(mcp,mcp$`Monocytic lineage`)
Monocytic_exp <- c(rep("low",200),rep("high",200))
mcp <- cbind(mcp,Monocytic_exp)

mcp <- arrange(mcp,mcp$`Myeloid dendritic cells`)
Myeloid_exp <- c(rep("low",200),rep("high",200))
mcp <- cbind(mcp,Myeloid_exp)

mcp <- arrange(mcp,mcp$Neutrophils)
Neutrophils_exp <- c(rep("low",200),rep("high",200))
mcp <- cbind(mcp,Neutrophils_exp)

mcp <- arrange(mcp,mcp$`Endothelial cells`)
Endothelial_exp <- c(rep("low",200),rep("high",200))
mcp <- cbind(mcp,Endothelial_exp)

mcp <- arrange(mcp,mcp$Fibroblasts)
Fibroblasts_exp <- c(rep("low",200),rep("high",200))
mcp <- cbind(mcp,Fibroblasts_exp)

svData <- mcp
unique(svData$Fibroblasts_exp)
svData$B_lineage_exp <- factor(svData$B_lineage_exp, levels = c("low","high"))
fit <- survfit(Surv(months,status) ~ B_lineage_exp, data = svData)
ggsurvplot(fit)
ggsurvplot(fit, pval = TRUE,linetype = "solid", #线的类型
           palette = c("red","blue"),#线的颜色
           legend.title="",legend=c(0.7,0.9),#图例的位置
           legend.labs=c("B lineage Low-expression","B lineage High-expression"),
           conf.int = F) #不显示置信区间
#####700*600
pheatmap(try,
         show_rownames = T,# 显示行名
         show_colnames = F,
         color =colorRampPalette(c("green", "black","red"))(100)#调色
         )

sur.cut <- surv_cutpoint(svData, time = "months", event = "status",variables = c("B lineage"))#####找最佳cutoff
summary(sur.cut)   
plot(sur.cut, "B lineage", palette = "npg")
##################
metadata <- as.data.frame(cbind(mcp$ID,mcp$B_lineage_exp))
colnames(metadata) <- c("ID","B_lineage")
metadata$B_lineage <- gsub("2","low",metadata$B_lineage)
metadata$B_lineage <- gsub("1","high",metadata$B_lineage)

expr <- as.data.frame(t(expr))
rn <- as.data.frame(rownames(expr))
colnames(rn)<- "ID"
expr <- cbind(rn,expr)

sample <- as.data.frame(metadata$ID)
colnames(sample) <- "ID"

expr <- inner_join(sample,expr,by ="ID")
###############
count_data <- as.data.frame(t(count_data))
rn <- as.data.frame(rownames(count_data))
rn$`rownames(count_data)`<- substr(rn$`rownames(count_data)`,1,16)
rn$type <- substr(rn$`rownames(count_data)`,14,16)
exprSet <- cbind(rn,count_data)
exprSet <- subset(exprSet,exprSet$type=="01A")
exprSet$`rownames(count_data)` <-substr(exprSet$`rownames(count_data)`,1,12)
colnames(exprSet)[1] <- "ID"
index <- duplicated(exprSet$ID)
table(index)
exprSet<-exprSet[!index,]
exprSet <- inner_join(metadata,exprSet,by="ID")
rownames(exprSet) <- exprSet[,1]
exprSet <- exprSet[,-(1:3)]
exprSet <- as.data.frame(t(exprSet))

sample <- c(rep("low",70),rep("high",330))
sample <- factor(B_lineage,levels = c("low","high"),ordered = F)
ID <- colnames(expr)
metadata <- data.frame(ID,sample)
library(DESeq2)
dds <-DESeqDataSetFromMatrix(countData=exprSet, 
                             colData=metadata, 
                             design=~sample,
                             tidy=F)
nrow(dds)
dds <- dds[rowSums(counts(dds))>1,]
nrow(dds)
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, "sample")
exprSet_vst <- as.data.frame(assay(vsd))
dds <- DESeq(dds)
normalized_counts <- as.data.frame(counts(dds, normalized=TRUE))
save(exprSet_vst,file = "vst.Rdata")
save(normalized_counts,file = "normalized_counts.Rdata")
contrast <- c("sample", "low", "high")
dd1 <- results(dds, contrast=contrast, alpha = 0.05)
plotMA(dd1, ylim=c(-5,5))

res <- dd1 %>% 
  data.frame() %>% 
  rownames_to_column("gene_id") %>% 
  separate(gene_id,into = c("gene_id"),sep = "\\.") 
colnames(res) <- c("gene_id","baseMean","logFC","lfcSE","stat","P.Value","adj.P.Val")
diffLab <- res %>% 
  filter(adj.P.Val < 0.05) %>% 
  filter(abs(logFC) >1.5)
save(diffLab,file = "diffLab.Rdata")
library(pheatmap)
heatdata <- exprSet_vst[diffLab$gene_id,]
group <- metadata$sample
annotation_col <- data.frame(group)
rownames(annotation_col) <- colnames(heatdata)
pheatmap(heatdata, #热图的数据
         cluster_rows = TRUE,#行聚类
         cluster_cols = TRUE,#列聚类，可以看出样本之间的区分度
         annotation_col =annotation_col, #标注样本分类
         annotation_legend=TRUE, # 显示注释
         show_rownames = F,# 显示行名
         show_colnames = F,# 显示行名
         scale = "row", #以行来标准化，这个功能很不错
         color =colorRampPalette(c("blue", "white","red"))(100),#调色
         #filename = "heatmap_F.pdf",#是否保存
         cellwidth = 1.5, cellheight = 0.4,# 格子比例
         fontsize = 10)
library(ggplot2)
library(ggrepel)
data <- res
data$significant <- as.factor(data$P.Value<0.05 & abs(data$logFC) > 0.5)
ggplot(data=data, aes(x=logFC, y =-log10(P.Value),color=significant)) +
  geom_point(alpha=0.8, size=1.2,col="black")+
  geom_point(data=subset(data, logFC > 1),alpha=0.8, size=1.4,col="red")+
  geom_point(data=subset(data, logFC < -1),alpha=0.6, size=1.4,col="blue")+
  labs(x="log2 (fold change)",y="-log10 (adj.P.Val)")+
  theme(plot.title = element_text(hjust = 0.4))+
  geom_hline(yintercept = -log10(0.05),lty=4,lwd=0.6,alpha=0.8)+
  geom_vline(xintercept = c(1,-1),lty=4,lwd=0.6,alpha=0.8)+
  theme_bw()+
  theme(panel.border = element_blank(),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),   
        axis.line = element_line(colour = "black")) 
  ####
diffLab <- diffLab %>% 
  filter(adj.P.Val < 0.01) %>% 
  filter(abs(logFC) >3)
###########################
rn <- as.data.frame(rownames(exprSet_vst))
colnames(rn) <- "gene_id"
exprSet_vst <- cbind(rn,exprSet_vst)
gene_id <- as.data.frame(diffLab[,1])
colnames(gene_id) <- "gene_id"
library(dplyr)
exprSet_vst_1 <- inner_join(gene_id,exprSet_vst,by="gene_id")
rownames(exprSet_vst_1)<- exprSet_vst_1[,1]
exprSet_vst_1 <- exprSet_vst_1[,-1]
#########
sur <- read.csv("sur.csv",header = T)
sur<- cbind(as.data.frame(sur$ID),as.data.frame(sur$status),as.data.frame(sur$days_to_last_followup))
colnames(sur) <- c("ID","status","days")
rownames(sur) <- sur[,1]
sur <- sur[,-1]
###########
if (all(colnames(exprSet_vst_1) %in% rownames(sur))){
  warning("两个文件的patient ID是一致的")
} else{
  warning("两个文件的patient ID不一致")
}
library("glmnet")
library("survival")
cvfit = cv.glmnet(t(exprSet_vst_1), Surv(sur$days,sur$status), 
                  #10倍交叉验证，非必须限定条件，这篇文献有，其他文献大多没提
                  nfold=10,
                  family = "cox"
) 
plot(cvfit)
fit <- glmnet(t(exprSet_vst_1), Surv(sur$days,sur$status), 
              family = "cox") 

#用包自带的函数画图
plot(fit, label = F)
coef.min = coef(cvfit, s = "lambda.1se") 
coef.min
active.min = which(coef.min != 0)
geneids <- rownames(exprSet_vst_1)[active.min]
index.min = coef.min[active.min]
combine <- cbind(geneids, index.min)
combine <- as.data.frame(combine)
colnames(combine) <- c("gene_id","coeff")
###
mycol <- rep(c("#223D6C","#D20A13","#FFD121","#088247","#11AA4D","#58CDD9","#7A142C","#5D90BA","#431A3D","#91612D","#6E568C","#E0367A","#D8D155","#64495D","#7CC767"),2)

#设置x轴最大值
xmax <- 25

plotCoef_plus <- function (beta, norm, lambda, df, dev, label = FALSE, legend = FALSE, xvar = c("norm", 
                                                                                                "lambda", "dev"), xlab = iname, ylab = "Coefficients", ...) 
{
  which = nonzeroCoef(beta)
  nwhich = length(which)
  switch(nwhich + 1, `0` = {
    warning("No plot produced since all coefficients zero")
    return()
  }, `1` = warning("1 or less nonzero coefficients; glmnet plot is not meaningful"))
  beta = as.matrix(beta[which, , drop = FALSE])
  xvar = match.arg(xvar)
  switch(xvar, norm = {
    index = if (missing(norm)) apply(abs(beta), 2, sum) else norm
    iname = "L1 Norm"
    approx.f = 1
  }, lambda = {
    index = log(lambda)
    iname = "Log Lambda"
    approx.f = 0
  }, dev = {
    index = dev
    iname = "Fraction Deviance Explained"
    approx.f = 1
  })
  dotlist = list(...)
  type = dotlist$type
  
  if (legend){
    #在右侧留出画图例的地方
    par(xpd = T, mar = par()$mar + c(0,0,0,6))
  }
  
  #修改bty，换个更好看的边框，还可以改成，o / n / 7 / l / c / u / ]
  if (is.null(type)) 
    matplot(index, t(beta), lty = 1, lwd = 2,
            xlab = xlab, ylab = ylab, 
            xlim = c(0, xmax), #设置x轴最大值
            col = mycol,#线的颜色
            type = "l", cex.lab=1.2, cex.axis=1,
            bty="n", ...)#不画右边框
  else matplot(index, t(beta), lty = 1, lwd = 2,
               xlab = xlab, ylab = ylab, 
               xlim = c(0, xmax), 
               col = mycol,
               type = "l", cex.lab=1.2, cex.axis=1,
               bty="n", ...)
  atdf = pretty(index)
  prettydf = approx(x = index, y = df, xout = atdf, rule = 2, 
                    method = "constant", f = approx.f)$y
  axis(3, at = atdf, labels = prettydf, tcl = NA)
  
  if (label) {
    nnz = length(which)
    xpos = max(index)
    pos = 4
    if (xvar == "lambda") {
      xpos = min(index)
      pos = 2
    }
    xpos = rep(xpos, nnz)
    ypos = beta[, ncol(beta)]
    
    #原函数打印序号，修改为打印基因名
    text(xpos, ypos, paste(rownames(exprSet_vst_1)[which]),
         cex = 0.8, #基因名字体大小
         #基因名的颜色跟线一样
         col = mycol,
         #如果你不想要彩色的字，就用下面这行
         #col = "black",
         pos = pos)
  }
  if (legend) {
    #画图例
    legend("topright",
           inset=c(-0.12,0),#图例画到图外面
           legend = rownames(sur), #图例文字
           col = mycol, #图例线的颜色，与文字对应
           lwd = 3, #图例中线的粗细
           cex = 1, #图例字体大小
           bty = "n") #不显示图例边框
  }
  par(xpd=FALSE)
}

plot.glmnet_plus <- function (x, xvar = c("norm", "lambda", "dev"), label = FALSE, legend = FALSE,
                              ...) 
{
  xvar = match.arg(xvar)
  plotCoef_plus(x$beta, lambda = x$lambda, df = x$df, dev = x$dev.ratio, 
                label = label, legend = legend, xvar = xvar, ...)
}
plot.glmnet_plus(fit, label = TRUE, #打印基因名
                 legend = FALSE) #不显示图例

#在图上画虚线
#你想用哪个cutoff，就在“v = ”写上相应的数字
#此处以lambda.min作为cutoff
abline(v = cvfit$lambda.1se, lty = 3, #线的类型，可以改成0, 1, 2, 3, 4, 5, 6
       lwd = 2, #线的粗细
       col = "black") #线的颜色
##########
###
rn <- as.data.frame(rownames(exprSet_vst_1))
colnames(rn) <- "gene_id"
exprSet_vst_1 <- cbind(rn,exprSet_vst_1)
aaa <- inner_join(combine,exprSet_vst_1,by="gene_id")
library(AnnotationDbi)
library(org.Hs.eg.db)
aaa$symbol <- mapIds(org.Hs.eg.db,
                     keys=aaa$gene_id,
                     column="SYMBOL",
                     keytype="ENSEMBL",
                     multiVals="first")
aa <- as.character(aaa[,403])
aa[12] <- "IGHD3-3"
aa[16] <- "IGKV2-40"
aaa$symbol <-aa
aaa<-na.omit(aaa)

rownames(aaa) <- aaa[,403]
aaa <- as.data.frame(t(aaa))
write.csv(aaa,file = "lasso.csv")
#=(-0.16936*B2)+(-0.35238*C2)+(-0.16979*D2)+(-0.27845*E2)+(-0.32492*F2)+(-0.21464*G2)+(-0.01268*H2)+(-0.03807*I2)+(-0.63325*J2)+(-0.17511*K2)+(-0.08366*L2)+(-0.05848*M2)+(-0.11619*N2)+(-0.47873*O2)+(-0.07392*P2)+(-0.22629*Q2)
bbb <- read.csv("lasso.csv",header = T)
rn <- as.data.frame(rownames(sur))
colnames(rn)<- "X"
sur <- cbind(rn,sur)
ccc <- inner_join(sur,bbb,by="X")
ccc <- arrange(ccc,ccc$rs)
sur.cut <- surv_cutpoint(ccc, time = "days", event = "status",variables = c("rs"))#####找最佳cutoff
summary(sur.cut) 
plot(sur.cut, "rs", palette = "npg")
write.csv(ccc,file = "ccc.csv")
###########
library(dplyr)
library("survival")
library("survminer")
ccc <- read.csv("ccc.csv",header = T)
ccc<- arrange(ccc,ccc$rs)
risk <- c(rep("low-risk",281),rep("high-risk",119)) 
ccc <- cbind(ccc,risk)
ccc <- read.csv("ccc.csv",header = T)
ccc$risk <- factor(ccc$risk, levels = c("low-risk","high-risk"))
fit <- survfit(Surv(days, status) ~ risk, data = ccc)
ggsurvplot(fit)
ggsurvplot(fit, pval = TRUE,linetype ="solid", #线的类型
           palette = c("red","blue"),#线的颜色
           legend.title="",legend=c(0.7,0.9),#图例的位置
           legend.labs=c("low-risk","high-risk"),
           conf.int = F) #不显示置信区间
############
library(reshape2)
library(ggplot2)
library(scales)
library(cowplot)
bestvars <- colnames(ccc)[4:16]
data <-ccc
# risk score，用于画顶部散点图
rs <- data$rs
names(rs) <- rownames(data)
rs_data <- data.frame(x=1:length(rs),rs=as.numeric(sort(rs)))
rs_data$Risk <- ifelse(rs_data$rs>=-16.18969, "High-risk", "Low-risk")
head(rs_data)
surv_data <- data.frame(x=1:length(rs),
                        t=data[names(sort(rs)),'days']/365*12,
                        s=data[names(sort(rs)),'status']) 
surv_data$Status <- as.factor(ifelse(surv_data$s==0,'Alive','Death'))
head(surv_data)
exp_data <- data[names(sort(rs)),which(colnames(data) %in% bestvars)]
rownames(exp_data) <-ccc[,1]
head(exp_data)
plot.A <- ggplot(rs_data, aes(x=x,y=rs))+
  geom_point(aes(col=Risk),size=0.5)+
  scale_color_manual(labels=c("High-risk","Low-risk"), 
                     #guide_legend(guide = NULL), #如果不想画图例就删掉#
                     name="Risk score", values =c("navy", "red")) + 
  
  # 画竖向虚线
  geom_segment(aes(x = sum(rs_data$Risk=="Low-risk"),
                   y = -30, 
                   xend = sum(rs_data$Risk=="Low-risk"), 
                   yend = max(rs_data$rs)), linetype="dashed", size = 0.6)+
  # 画横线
  #geom_segment(aes(x=0,y=median(rs_data$rs),
  #                 xend=nrow(rs_data),
  #                 yend=median(rs_data$rs)),linetype="dashed", size = 0.3)+
  
  # 写文字Cutoff:
  #geom_text(aes(x=sum(rs_data$Risk=="Low-risk")/2,
  #              y=median(rs_data$rs)+8,
  #              label=paste0("Cutoff: ",round(median(rs_data$rs),3))),
  #          col ="black",size = 4,alpha=0.8)+
  
theme(axis.title.x=element_blank()) +
  scale_x_continuous(limits = c(0,NA),expand = c(0,0)) +
  labs(y="Risk score",x="",fill="Risk") +
  #scale_colour_discrete(name="Risk scores") +
  theme_classic() +
  theme(axis.ticks.x=element_blank(),
        axis.line = element_blank(), #如果想像example2那样画坐标轴，就删掉这行
        axis.text.x=element_blank())

plot.A
plot.B <- ggplot(surv_data,aes(x=x,y=t))+
  geom_point(aes(col=Status),size=0.5)+
  geom_vline(aes(xintercept=sum(rs_data$Risk=="Low-risk")),size=0.6,linetype="dashed")+
  scale_x_continuous(limits = c(0,NA),expand = c(0,0))+
  scale_color_manual(labels=c("Alive","Dead"),
                     values =c("navy","red"))+
  labs(y="RFS(months)",x="")+
  theme_classic()+
  theme(axis.ticks.x=element_blank(),
        axis.line = element_blank(), #如果想像example2那样不画坐标轴，就删掉前面的#
        axis.text.x=element_blank())

plot.B
tmp <- t(scale(exp_data))
tmp[tmp > 1] = 1
tmp[tmp < -1] = -1
reorder_cormat <- function(cormat){
  dd <- dist(cormat)
  hc <- hclust(dd,method = "average")
  cormat <-cormat[hc$order,]
}
tmp1 <- reorder_cormat(tmp)
tmp1 <- rbind(tmp1,ifelse(rs_data$Risk=="Low-risk",-1.5,1.5))
tmp.m <- melt(tmp1)

p2 <-ggplot(tmp.m, aes(Var2, Var1),size=0.5) + 
  geom_tile(aes(fill = value)) 

plot.C <- p2 + scale_fill_gradient2(name="Genes\nexpression", low="navy", high="red", mid="white") +
  labs(x = "", y = "")+
  theme_classic()+
  theme(legend.title = element_text(size = 12), legend.position = "right",
        axis.line = element_blank(),
        axis.ticks=element_blank(),
        axis.text.x=element_blank())

plot.C
plot_grid(plot.A, plot.B, plot.C,
          labels = c("B", "",""), # 或者按顺序标注ABC
          rel_heights = c(1,1,1), # 3个图的比例
          #label_x=0,
          #label_y=1,
          align = 'v',ncol = 1, axis="lr", scale = c(1,1,1), greedy = F)
ggsave("risk-train.pdf", width = 7, height = 9)
###########
library(timeROC)
pbc <- ccc
ROC.bili.aalen<-timeROC(T=pbc$days,
                        delta=pbc$status,marker=pbc$rs,
                        cause=1,weighting="cox",
                        times=c(180,365,730,1825,2555))
ROC.bili.aalen
plot(ROC.bili.aalen,time=180,lwd=2,title=F)
plot(ROC.bili.aalen,time=365,col="green",add=TRUE,lwd=2,lty=1)
plot(ROC.bili.aalen,time=730,col="blue",add=TRUE,lwd=2,lty=1)
plot(ROC.bili.aalen,time=1825,col="purple",add=TRUE,lwd=2,lty=1)
plot(ROC.bili.aalen,time=2555,col="yellow",add=TRUE,lwd=2,lty=1)
legend("bottomright",c("half-year:0.764","1-year:0.646","2-year:0.621","5-year:0.635","7-year:0.622"),
       col=c("red","green","blue","purple"),lty=1)  ###(700*650)
########
####开始寻找验证集
require("GEOquery")
library(GEOquery)
gse29013 <- getGEO('GSE29013', destdir=".",AnnotGPL = F,getGPL = F)

if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install("hgu133plus2.db")
library(hgu133plus2.db)
ids = toTable(hgu133plus2SYMBOL)#####至此观察GPL570平台包含4基因模型
#####在文件夹中下载 表达和metadata
downGSE <- function(studyID = "GSE29013", destdir = ".") {
  
  library(GEOquery)
  eSet <- getGEO(studyID, destdir = destdir, getGPL = F)
  
  exprSet = exprs(eSet[[1]])
  pdata = pData(eSet[[1]])
  
  write.csv(exprSet, paste0(studyID, "_exprSet.csv"))
  write.csv(pdata, paste0(studyID, "_metadata.csv"))
  return(eSet)
}
downGSE('GSE29013')

gse29013_exp <- read.csv("GSE29013_exprSet.csv",header = T)
rownames(gse29013_exp) <- gse29013_exp[,1]
gse29013_exp <- as.data.frame(t(gse29013_exp))
rownames(gse29013_exp)[1] = "X"
gse29013_exp <- gse29013_exp[-1,]
gse29013_surv <- read.csv("GSE29013_metadata.csv",header = T)
gse29013_surv_1 <- cbind(as.data.frame(gse29013_surv[,14:19]))
gse29013_surv_1 <- gse29013_surv_1[,-(2:4)]
gse29013_exp <- apply(gse29013_exp,c(1,2), as.character)
gse29013_exp <- apply(gse29013_exp,c(1,2), as.numeric)
gse29013_meta <- cbind(gse29013_surv_1,gse29013_exp)
gse29013_meta <-cbind(gse29013_meta[,1:3],gse29013_meta$`206760_s_at`,gse29013_meta$`206759_at`,gse29013_meta$`205544_s_at`,gse29013_meta$`235372_at`,gse29013_meta$`235400_at`,gse29013_meta$`235401_s_at`,gse29013_meta$`206255_at`,gse29013_meta$`228592_at`,gse29013_meta$`217418_x_at`,gse29013_meta$`228599_at`,gse29013_meta$`210356_x_at`,gse29013_meta$`243968_x_at`,gse29013_meta$`235982_at`,gse29013_meta$`211298_s_at`,gse29013_meta$`1565228_s_at`,gse29013_meta$`213953_at`,gse29013_meta$`206398_s_at`,gse29013_meta$`229152_at`,gse29013_meta$`206586_at`,gse29013_meta$`230877_at`,gse29013_meta$`215621_s_at`,gse29013_meta$`213674_x_at`,gse29013_meta$`207641_at`)
colnames(gse29013_meta) <- c("his","times","status","FCER2_1","FCER2_2","CR2","FCRLA_1","FCRLA_2","FCRLA_3","BLK","MS4A1_1","MS4A1_2","MS4A1_3","MS4A1_4","FCRL1_1","FCRL1_2","ALB_1","ALB_2","KRT20","CD19","FDCSP","CNR2","IGHD_1","IGHD_2","IGHD_3","TNFRSF13B")
gse29013_meta$FCER2<- rowMeans(gse29013_meta[4:5])
gse29013_meta$FCRLA<- rowMeans(gse29013_meta[7:9])
gse29013_meta$MS4A1<- rowMeans(gse29013_meta[11:14])
gse29013_meta$FCRL1<- rowMeans(gse29013_meta[15:16])
gse29013_meta$ALB<- rowMeans(gse29013_meta[17:18])
gse29013_meta$IGHD<- rowMeans(gse29013_meta[23:25])

gse29013_meta <- gse29013_meta[,-(23:25)]
gse29013_meta <- gse29013_meta[,-(17:18)]
gse29013_meta <- gse29013_meta[,-(4:5)]

gse29013_meta <- subset(gse29013_meta,gse29013_meta$his == "histology: Adenocarcinoma")####去除鳞癌
gse29013_meta$times <- substr(gse29013_meta$times,12,22)
gse29013_meta$status <- substr(gse29013_meta$status,13,14)
write.csv(gse29013_meta,file = "gse29013_meta.csv")
##########

gse30219_exp <- read.csv("GSE30219_exprSet.csv",header = T)
rownames(gse30219_exp) <- gse30219_exp[,1]
gse30219_exp <- as.data.frame(t(gse30219_exp))
gse30219_exp <- gse30219_exp[-1,]
gse30219_surv <- read.csv("GSE30219_metadata.csv",header = T)
gse30219_surv_1 <- as.data.frame(gse30219_surv[,18:19])
gse30219_surv_2 <- as.data.frame(gse30219_surv[,14])
gse30219_exp <- apply(gse30219_exp,c(1,2), as.character)
gse30219_exp <- apply(gse30219_exp,c(1,2), as.numeric)
gse30219_meta <- cbind(gse30219_surv_2,gse30219_surv_1,gse30219_exp)
gse30219_meta <-cbind(gse30219_meta[,1:3],gse30219_meta$`206760_s_at`,gse30219_meta$`206759_at`,gse30219_meta$`205544_s_at`,gse30219_meta$`235372_at`,gse30219_meta$`235400_at`,gse30219_meta$`235401_s_at`,gse30219_meta$`206255_at`,gse30219_meta$`228592_at`,gse30219_meta$`217418_x_at`,gse30219_meta$`228599_at`,gse30219_meta$`210356_x_at`,gse30219_meta$`243968_x_at`,gse30219_meta$`235982_at`,gse30219_meta$`211298_s_at`,gse30219_meta$`1565228_s_at`,gse30219_meta$`213953_at`,gse30219_meta$`206398_s_at`,gse30219_meta$`229152_at`,gse30219_meta$`206586_at`,gse30219_meta$`230877_at`,gse30219_meta$`215621_s_at`,gse30219_meta$`213674_x_at`,gse30219_meta$`207641_at`)
colnames(gse30219_meta) <- c("his","times","status","FCER2_1","FCER2_2","CR2","FCRLA_1","FCRLA_2","FCRLA_3","BLK","MS4A1_1","MS4A1_2","MS4A1_3","MS4A1_4","FCRL1_1","FCRL1_2","ALB_1","ALB_2","KRT20","CD19","FDCSP","CNR2","IGHD_1","IGHD_2","IGHD_3","TNFRSF13B")
gse30219_meta$FCER2<- rowMeans(gse30219_meta[4:5])
gse30219_meta$FCRLA<- rowMeans(gse30219_meta[7:9])
gse30219_meta$MS4A1<- rowMeans(gse30219_meta[11:14])
gse30219_meta$FCRL1<- rowMeans(gse30219_meta[15:16])
gse30219_meta$ALB<- rowMeans(gse30219_meta[17:18])
gse30219_meta$IGHD<- rowMeans(gse30219_meta[23:25])
gse30219_meta <- gse30219_meta[,-(23:25)]
gse30219_meta <- gse30219_meta[,-(11:18)]
gse30219_meta <- gse30219_meta[,-(7:9)]
gse30219_meta <- gse30219_meta[,-(4:5)]

gse30219_meta <- subset(gse30219_meta,gse30219_meta$his == "histology: ADC")####去除鳞癌
gse30219_meta$times <- substr(gse30219_meta$times,26,27)
gse30219_meta$status <- substr(gse30219_meta$status,9,12)
write.csv(gse30219_meta,file = "gse30219_meta.csv")
##########
gse31908_exp <- read.csv("GSE31908_exprSet.csv",header = T)
rownames(gse31908_exp) <- gse31908_exp[,1]
gse31908_exp <- as.data.frame(t(gse31908_exp))
gse31908_exp <- gse31908_exp[-1,]
gse31908_surv <- read.csv("GSE31908_metadata.csv",header = T)
gse31908_surv_1 <- as.data.frame(gse31908_surv[,16:19])
gse31908_surv_1 <- as.data.frame(gse31908_surv_1[,-(2:3)])
gse31908_exp <- apply(gse31908_exp,c(1,2), as.character)
gse31908_exp <- apply(gse31908_exp,c(1,2), as.numeric)
gse31908_meta <- cbind(gse31908_surv_1,gse31908_exp)
gse31908_meta <-cbind(gse31908_meta[,1:2],gse31908_meta$`206760_s_at`,gse31908_meta$`206759_at`,gse31908_meta$`205544_s_at`,gse31908_meta$`235372_at`,gse31908_meta$`235400_at`,gse31908_meta$`235401_s_at`,gse31908_meta$`206255_at`,gse31908_meta$`228592_at`,gse31908_meta$`217418_x_at`,gse31908_meta$`228599_at`,gse31908_meta$`210356_x_at`,gse31908_meta$`243968_x_at`,gse31908_meta$`235982_at`,gse31908_meta$`211298_s_at`,gse31908_meta$`1565228_s_at`,gse31908_meta$`213953_at`,gse31908_meta$`206398_s_at`,gse31908_meta$`229152_at`,gse31908_meta$`206586_at`,gse31908_meta$`230877_at`,gse31908_meta$`215621_s_at`,gse31908_meta$`213674_x_at`,gse31908_meta$`207641_at`)
colnames(gse31908_meta) <- c("status","times","FCER2_1","FCER2_2","CR2","FCRLA_1","FCRLA_2","FCRLA_3","BLK","MS4A1_1","MS4A1_2","MS4A1_3","MS4A1_4","FCRL1_1","FCRL1_2","ALB_1","ALB_2","KRT20","CD19","FDCSP","CNR2","IGHD_1","IGHD_2","IGHD_3","TNFRSF13B")
gse31908_meta$FCER2<- rowMeans(gse31908_meta[3:4])
gse31908_meta$FCRLA<- rowMeans(gse31908_meta[6:8])
gse31908_meta$MS4A1<- rowMeans(gse31908_meta[10:13])
gse31908_meta$FCRL1<- rowMeans(gse31908_meta[14:15])
gse31908_meta$ALB<- rowMeans(gse31908_meta[16:17])
gse31908_meta$IGHD<- rowMeans(gse31908_meta[22:24])
gse31908_meta <- gse31908_meta[,-(22:24)]
gse31908_meta <- gse31908_meta[,-(10:17)]
gse31908_meta <- gse31908_meta[,-(6:8)]
gse31908_meta <- gse31908_meta[,-(3:4)]
gse31908_meta$status <- substr(gse31908_meta$status,15,19)
write.csv(gse31908_meta,file = "gse31908_meta.csv")
###################
combine$symbol <- mapIds(org.Hs.eg.db,
                     keys=combine$gene_id,
                     column="SYMBOL",
                     keytype="ENSEMBL",
                     multiVals="first")
#=(-0.352377115520288*D2)+(-0.278448273332464*E2)+(-0.0380684238394333*F2)+(-0.633253337382075*G2)+(-0.175107823273178*H2)+(-0.0836622745676696*I2)+(-0.116190820926794*J2)+(-0.169356169343934*K2)+(-0.169786929442595*L2)+(-0.324924837019093*M2)+(-0.214638642200622*N2)+(-0.0126811109154122*O2)+(-0.0584836305090448*P2)
meta <- read.csv("metameta.csv",header = T)
sur.cut <- surv_cutpoint(meta, time = "months", event = "status",variables = c("rs"))#####找最佳cutoff
summary(sur.cut) 
meta$risk <- factor(meta$risk, levels = c("low-risk","high-risk"))
fit <- survfit(Surv(months, status) ~ risk, data = meta)
ggsurvplot(fit)
ggsurvplot(fit, pval = TRUE,linetype ="solid", #线的类型
           palette = c("red","blue"),#线的颜色
           legend.title="",legend=c(0.7,0.9),#图例的位置
           legend.labs=c("low-risk","high-risk"),
           conf.int = F) #不显示置信区间
#######
bestvars <- colnames(meta)[4:16]
data <-meta
# risk score，用于画顶部散点图
rs <- data$rs
names(rs) <- rownames(data)
rs_data <- data.frame(x=1:length(rs),rs=as.numeric(sort(rs)))
rs_data$Risk <- ifelse(rs_data$rs>=-13.1088, "High-risk", "Low-risk")
head(rs_data)
surv_data <- data.frame(x=1:length(rs),
                        t=meta$months,
                        s=data[names(sort(rs)),'status']) 
surv_data$Status <- as.factor(ifelse(surv_data$s==0,'Alive','Death'))
head(surv_data)
exp_data <- data[names(sort(rs)),which(colnames(data) %in% bestvars)]
rownames(exp_data) <-meta[,1]
head(exp_data)
plot.A <- ggplot(rs_data, aes(x=x,y=rs))+
  geom_point(aes(col=Risk),size=0.5)+
  scale_color_manual(labels=c("High-risk","Low-risk"), 
                     #guide_legend(guide = NULL), #如果不想画图例就删掉#
                     name="Risk score", values =c("navy", "red")) + 
  
  # 画竖向虚线
  geom_segment(aes(x = sum(rs_data$Risk=="Low-risk"),
                   y = -23, 
                   xend = sum(rs_data$Risk=="Low-risk"), 
                   yend = max(rs_data$rs)), linetype="dashed", size = 0.6)+
  # 画横线
  #geom_segment(aes(x=0,y=median(rs_data$rs),
  #                 xend=nrow(rs_data),
  #                 yend=median(rs_data$rs)),linetype="dashed", size = 0.3)+
  
  # 写文字Cutoff:
  #geom_text(aes(x=sum(rs_data$Risk=="Low-risk")/2,
  #              y=median(rs_data$rs)+8,
  #              label=paste0("Cutoff: ",round(median(rs_data$rs),3))),
  #          col ="black",size = 4,alpha=0.8)+
  
theme(axis.title.x=element_blank()) +
  scale_x_continuous(limits = c(0,NA),expand = c(0,0)) +
  labs(y="Risk score",x="",fill="Risk") +
  #scale_colour_discrete(name="Risk scores") +
  theme_classic() +
  theme(axis.ticks.x=element_blank(),
        axis.line = element_blank(), #如果想像example2那样画坐标轴，就删掉这行
        axis.text.x=element_blank())

plot.A
plot.B <- ggplot(surv_data,aes(x=x,y=t))+
  geom_point(aes(col=Status),size=0.5)+
  geom_vline(aes(xintercept=sum(rs_data$Risk=="Low-risk")),size=0.6,linetype="dashed")+
  scale_x_continuous(limits = c(0,NA),expand = c(0,0))+
  scale_color_manual(labels=c("Alive","Dead"),
                     values =c("navy","red"))+
  labs(y="RFS(months)",x="")+
  theme_classic()+
  theme(axis.ticks.x=element_blank(),
        axis.line = element_blank(), #如果想像example2那样不画坐标轴，就删掉前面的#
        axis.text.x=element_blank())

plot.B
tmp <- t(scale(exp_data))
tmp[tmp > 1] = 1
tmp[tmp < -1] = -1
reorder_cormat <- function(cormat){
  dd <- dist(cormat)
  hc <- hclust(dd,method = "average")
  cormat <-cormat[hc$order,]
}
tmp1 <- reorder_cormat(tmp)
tmp1 <- rbind(tmp1,ifelse(rs_data$Risk=="Low-risk",-1.5,1.5))
tmp.m <- melt(tmp1)

p2 <-ggplot(tmp.m, aes(Var2, Var1),size=0.5) + 
  geom_tile(aes(fill = value)) 

plot.C <- p2 + scale_fill_gradient2(name="Genes\nexpression", low="navy", high="red", mid="white") +
  labs(x = "", y = "")+
  theme_classic()+
  theme(legend.title = element_text(size = 12), legend.position = "right",
        axis.line = element_blank(),
        axis.ticks=element_blank(),
        axis.text.x=element_blank())

plot.C
plot_grid(plot.A, plot.B, plot.C,
          labels = c("B", "",""), # 或者按顺序标注ABC
          rel_heights = c(1,1,1), # 3个图的比例
          #label_x=0,
          #label_y=1,
          align = 'v',ncol = 1, axis="lr", scale = c(1,1,1), greedy = F)
ggsave("risk-test.pdf", width = 7, height = 9)
pbc <- meta
ROC.bili.aalen<-timeROC(T=pbc$months,
                        delta=pbc$status,marker=pbc$rs,
                        cause=1,weighting="cox",
                        times=c(6,12,24,60,84))
ROC.bili.aalen
plot(ROC.bili.aalen,time=6,lwd=2,title=F)
plot(ROC.bili.aalen,time=12,col="green",add=TRUE,lwd=2,lty=1)
plot(ROC.bili.aalen,time=24,col="blue",add=TRUE,lwd=2,lty=1)
plot(ROC.bili.aalen,time=60,col="purple",add=TRUE,lwd=2,lty=1)
plot(ROC.bili.aalen,time=84,col="yellow",add=TRUE,lwd=2,lty=1)
legend("bottomright",c("half-year:0.751","1-year:0.764","2-year:0.665","5-year:0.596","7-year:0.602"),
       col=c("red","green","blue","purple"),lty=1)  ###(700*650)
##################
BiocManager::install("clusterProfiler")
BiocManager::install("org.Mm.eg.db")
install.packages('GOplot')
library(clusterProfiler)
BiocManager::install("AnnotationHub")
library(AnnotationHub)
gsym.fc <- as.data.frame(diffLab$gene_id)
colnames(gsym.fc) <- "enembl"
gsym.id <- bitr(gsym.fc$enembl, #基因名
                fromType = "ENSEMBL", #从gene symbol
                toType = "ENTREZID", #提取ENTREZ ID
                OrgDb = "org.Hs.eg.db") #相应物种的包，人是org.Hs.eg.db
gsym.id_1 <- bitr(gsym.fc$enembl, #基因名
                fromType = "ENSEMBL", #从gene symbol
                toType = "SYMBOL", #提取ENTREZ ID
                OrgDb = "org.Hs.eg.db") #相应物种的包，人是org.Hs.eg.db
gsym.id <- cbind(gsym.id,gsym.id_1$SYMBOL)
colnames(gsym.id)[3] <- "SYMBOL"
log <- as.data.frame(cbind(diffLab$gene_id,diffLab$logFC))
colnames(log) <- c("ENSEMBL","log2fc")
id.fc <- inner_join(gsym.id,log,by="ENSEMBL")
ego_CC <- enrichGO(gene = id.fc$ENTREZID,
                   OrgDb= org.Hs.eg.db,
                   ont = "CC",
                   pAdjustMethod = "BH",
                   minGSSize = 1,
                   pvalueCutoff = 0.05,
                   qvalueCutoff = 0.05,
                   readable = TRUE)
barplot(ego_CC)
ego_BP <- enrichGO(gene = id.fc$ENTREZID,
                   OrgDb= org.Hs.eg.db,
                   ont = "BP",
                   pAdjustMethod = "BH",
                   minGSSize = 1,
                   pvalueCutoff = 0.01,
                   qvalueCutoff = 0.01,
                   readable = TRUE)
barplot(ego_BP)
ego_MF <- enrichGO(gene = id.fc$ENTREZID,
                   OrgDb= org.Hs.eg.db,
                   ont = "MF",
                   pAdjustMethod = "BH",
                   minGSSize = 1,
                   pvalueCutoff = 0.01,
                   qvalueCutoff = 0.01,
                   readable = TRUE)
barplot(ego_MF)
go <- enrichGO(gene = id.fc$ENTREZID, OrgDb = "org.Hs.eg.db", ont="all")
library(ggplot2)
p <- dotplot(go, split="ONTOLOGY") +facet_grid(ONTOLOGY~., scale="free")
p
############
EGG <- enrichKEGG(gene= id.fc$ENTREZID,
                  organism     = 'hsa',
                  pvalueCutoff = 0.05)
barplot(EGG)
dotplot(EGG)
######
surr <- read.csv("sur.csv",header = T)
surr$t <- substr(surr$t,2,2)
colnames(surr)[1] <- "X"
total <- inner_join(surr,ccc,by="X")
##########
library("survival")
library("survminer")
covariates <- c("age", "gender",  "stage", "t", "n","rs")
univ_formulas <- sapply(covariates,
                        function(x) as.formula(paste('Surv(days, status.x)~', x)))

univ_models <- lapply( univ_formulas, function(x){coxph(x, data = total)})
# Extract data 
univ_results <- lapply(univ_models,
                       function(x){ 
                         x <- summary(x)
                         p.value<-signif(x$wald["pvalue"], digits=2)
                         wald.test<-signif(x$wald["test"], digits=2)
                         beta<-signif(x$coef[1], digits=2);#coeficient beta
                         HR <-signif(x$coef[2], digits=2);#exp(beta)
                         HR.confint.lower <- signif(x$conf.int[,"lower .95"], 2)
                         HR.confint.upper <- signif(x$conf.int[,"upper .95"],2)
                         HR <- paste0(HR, " (", 
                                      HR.confint.lower, "-", HR.confint.upper, ")")
                         res<-c(beta, HR, wald.test, p.value)
                         names(res)<-c("beta", "HR (95% CI for HR)", "wald.test", 
                                       "p.value")
                         return(res)
                         #return(exp(cbind(coef(x),confint(x))))
                       })
res <- t(as.data.frame(univ_results, check.names = F))
as.data.frame(res)
res.cox <- coxph(Surv(days, status.x) ~ age + gender + stage+t+n+rs, data =  total)
summary(res.cox)
############3
library(forestplot)
library(haven)
ForestPlot <- read.csv("f3.csv",header = T)
attach(ForestPlot)
forestplot(as.matrix(ForestPlot[,1]), HR, LowerCI, UpperCI, graph.pos=2, zero=1, graphwidth=unit(50,"mm"), lineheight="auto", boxsize=0.1, xticks=(c(0.5,1,1.5,2,2.5,3,4.5)), col= fpColors(all.elements = "black"))
ForestPlot <- read.csv("f4.csv",header = T)
attach(ForestPlot)
forestplot(as.matrix(ForestPlot[,1]), HR, LowerCI, UpperCI, graph.pos=2, zero=1, graphwidth=unit(50,"mm"), lineheight="auto", boxsize=0.1, xticks=(c(0.5,1,1.5,2,2.5)), col= fpColors(all.elements = "black"))
###########
pbc <- total
colnames(pbc)[27] <-"risk score" 
colnames(pbc)[8] <-"lymph-node invasion" 

library(rms)
dd<-datadist(pbc)
options(datadist="dd")
options(na.action="na.delete")
summary(pbc$days)
coxpbc<-cph(formula = Surv(days,`status.x`) ~ age+`risk score`+stage+n ,data=pbc,x=T,y=T,surv = T,na.action=na.delete)  
print(coxpbc)
surv<-Survival(coxpbc) 
surv1<-function(x) surv(365,x)
surv3<-function(x) surv(730,x)
surv5<-function(x) surv(1825,x)
surv7<-function(x) surv(2555,x)
x<-nomogram(coxpbc,fun = list(surv1,surv3,surv5,surv7),lp=T,
            funlabel = c('1-year survival Probability','2-year survival Probability','5-year survival Probability','7-year survival Probability'),
            maxscale = 100,fun.at = c(0.95,0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1))
pdf("nomogram.pdf",width = 12,height = 10)
plot(x, lplabel="Linear Predictor",
     xfrac=.35,varname.label=TRUE, varname.label.sep="=", ia.space=.2, 
     tck=NA, tcl=-0.20, lmgp=0.3,
     points.label='Points', total.points.label='Total Points',
     total.sep.page=FALSE, 
     cap.labels=FALSE,cex.var = 1.6,cex.axis = 1.05,lwd=5,
     label.every = 1,col.grid = gray(c(0.8, 0.95)))
dev.off()
#################
f1<-cph(formula = Surv(days,`status.x`) ~  age+`risk score`+stage+n,data=pbc,x=T,y=T,surv = T,na.action=na.delete,time.inc = 2555) 

#参数m=50表示每组50个样本进行重复计算
cal1<-calibrate(f1, cmethod="KM", method="boot",u=2555,m=50,B=1000) 
plot(cal1,
     lwd = 2,#error bar的粗细
     lty = 1,#error bar的类型，可以是0-6
     errbar.col = c("#2166AC"),#error bar的颜色
     xlim = c(0,1),ylim= c(0,1),
     xlab = "Nomogram-prediced OS (%)",ylab = "Observed OS (%)",
     cex.lab=1.2, cex.axis=1, cex.main=1.2, cex.sub=0.6) #字的大小
lines(cal1[,c('mean.predicted',"KM")], 
      type = 'b', #连线的类型，可以是"p","b","o"
      lwd = 2, #连线的粗细
      pch = 16, #点的形状，可以是0-20
      col = c("#2166AC")) #连线的颜色
mtext("")
box(lwd = 1) #边框粗细
abline(0,1,lty = 3, #对角线为虚线
       lwd = 2, #对角线的粗细
       col = c("#224444")#对角线的颜色
) 
######
write.csv(total,file = "total_1.csv")
pbc <- read.csv("total_1.csv",header = T)
ROC.bili.aalen<-timeROC(T=pbc$months,
                        delta=pbc$status.x,marker=pbc$nomogram,
                        cause=1,weighting="cox",
                        times=c(6,12,24,60,84))
ROC.bili.aalen
ROC.bili.aalen.1<-timeROC(T=pbc$months,
                        delta=pbc$status.x,marker=pbc$rs,
                        cause=1,weighting="cox",
                        times=c(6,12,24,60,84))
ROC.bili.aalen.1
ROC.bili.aalen.2<-timeROC(T=pbc$months,
                        delta=pbc$status.x,marker=pbc$age,
                        cause=1,weighting="cox",
                        times=c(6,12,24,60,84))
ROC.bili.aalen.2
ROC.bili.aalen.3<-timeROC(T=pbc$months,
                          delta=pbc$status.x,marker=pbc$stage,
                          cause=1,weighting="cox",
                          times=c(6,12,24,60,84))
ROC.bili.aalen.3
plot(ROC.bili.aalen,time=12,lwd=2,title=F)
plot(ROC.bili.aalen.1,time=12,col="green",add=TRUE,lwd=2,lty=1)
plot(ROC.bili.aalen.2,time=12,col="blue",add=TRUE,lwd=2,lty=1)
plot(ROC.bili.aalen.3,time=12,col="purple",add=TRUE,lwd=2,lty=1)
legend("bottomright",c("nomogram:0.736","risk score:0.646","age:0.494","stage:0.734"),
       col=c("red","green","blue","purple"),lty=1)  ###(700*650)

plot(ROC.bili.aalen,time=24,lwd=2,title=F)
plot(ROC.bili.aalen.1,time=24,col="green",add=TRUE,lwd=2,lty=1)
plot(ROC.bili.aalen.2,time=24,col="blue",add=TRUE,lwd=2,lty=1)
plot(ROC.bili.aalen.3,time=24,col="purple",add=TRUE,lwd=2,lty=1)
legend("bottomright",c("nomogram:0.763","risk score:0.610","age:0.536","stage:0.752"),
       col=c("red","green","blue","purple"),lty=1)  ###(700*650)

plot(ROC.bili.aalen,time=60,lwd=2,title=F)
plot(ROC.bili.aalen.1,time=60,col="green",add=TRUE,lwd=2,lty=1)
plot(ROC.bili.aalen.2,time=60,col="blue",add=TRUE,lwd=2,lty=1)
plot(ROC.bili.aalen.3,time=60,col="purple",add=TRUE,lwd=2,lty=1)
legend("bottomright",c("nomogram:0.732","risk score:0.635","age:0.562","stage:0.650"),
       col=c("red","green","blue","purple"),lty=1)  ###(700*650)

plot(ROC.bili.aalen,time=84,lwd=2,title=F)
plot(ROC.bili.aalen.1,time=84,col="green",add=TRUE,lwd=2,lty=1)
plot(ROC.bili.aalen.2,time=84,col="blue",add=TRUE,lwd=2,lty=1)
plot(ROC.bili.aalen.3,time=84,col="purple",add=TRUE,lwd=2,lty=1)
legend("bottomright",c("nomogram:0.810","risk score:0.626","age:0.600","stage:0.696"),
       col=c("red","green","blue","purple"),lty=1)  ###(700*650)
##################
total <- read.csv("total_1.csv",header = T)
sex_m <- subset(total,total$gender=="MALE")
sex_m$risk <- factor(sex_m$risk, levels = c("low-risk","high-risk"))
fit <- survfit(Surv(months, status) ~ risk, data = sex_m)
ggsurvplot(fit)
ggsurvplot(fit, pval = TRUE,linetype ="solid", #线的类型
           palette = c("red","blue"),#线的颜色
           legend.title="",legend=c(0.7,0.9),#图例的位置
           legend.labs=c("low-risk","high-risk"),
           conf.int = F) #不显示置信区间
sex_f <- subset(total,total$gender=="FEMALE")
write.csv(sex_f,file = "fff.csv")
sex_f <- read.csv("fff.csv",header = T)
sex_f$risk <- factor(sex_f$risk, levels = c("low-risk","high-risk"))
fit <- survfit(Surv(months, status) ~ risk, data = sex_f)
ggsurvplot(fit)
ggsurvplot(fit, pval = TRUE,linetype ="solid", #线的类型
           palette = c("red","blue"),#线的颜色
           legend.title="",legend=c(0.7,0.9),#图例的位置
           legend.labs=c("low-risk","high-risk"),
           conf.int = F) #不显示置信区间
age_youn <- subset(total,total$aage=="<65")
write.csv(age_youn,file = "youn.csv")
age_youn <- read.csv("youn.csv",header = T)
age_youn$risk <- factor(age_youn$risk, levels = c("low-risk","high-risk"))
fit <- survfit(Surv(months, status) ~ risk, data = age_youn)
ggsurvplot(fit)
ggsurvplot(fit, pval = TRUE,linetype ="solid", #线的类型
           palette = c("red","blue"),#线的颜色
           legend.title="",legend=c(0.7,0.9),#图例的位置
           legend.labs=c("low-risk","high-risk"),
           conf.int = F) #不显示置信区间
age_old <- subset(total,total$aage==">65")
age_old$risk <- factor(age_old$risk, levels = c("low-risk","high-risk"))
fit <- survfit(Surv(months, status) ~ risk, data = age_old)
ggsurvplot(fit)
ggsurvplot(fit, pval = TRUE,linetype ="solid", #线的类型
           palette = c("red","blue"),#线的颜色
           legend.title="",legend=c(0.7,0.9),#图例的位置
           legend.labs=c("low-risk","high-risk"),
           conf.int = F) #不显示置信区间
stage_ear <- subset(total,total$sstage=="ear")
write.csv(stage_ear,file = "ear.csv")
stage_ear <- read.csv("ear.csv",header = T)
stage_ear$risk <- factor(stage_ear$risk, levels = c("low-risk","high-risk"))
fit <- survfit(Surv(months, status) ~ risk, data = stage_ear)
ggsurvplot(fit)
ggsurvplot(fit, pval = TRUE,linetype ="solid", #线的类型
           palette = c("red","blue"),#线的颜色
           legend.title="",legend=c(0.7,0.9),#图例的位置
           legend.labs=c("low-risk","high-risk"),
           conf.int = F) #不显示置信区间
stage_adv <- subset(total,total$sstage=="adv")
write.csv(stage_adv,file = "adv.csv")
stage_adv <- read.csv("adv.csv",header = T)
stage_adv$risk <- factor(stage_adv$risk, levels = c("low-risk","high-risk"))
fit <- survfit(Surv(months, status) ~ risk, data = stage_adv)
ggsurvplot(fit)
ggsurvplot(fit, pval = TRUE,linetype ="solid", #线的类型
           palette = c("red","blue"),#线的颜色
           legend.title="",legend=c(0.7,0.9),#图例的位置
           legend.labs=c("low-risk","high-risk"),
           conf.int = F) #不显示置信区间
########
rm(list = ls())
tot <- read.csv("total_1.csv",header = T)
tot <- tot[,-(2:25)]
tot <- tot[,-(3:5)]
expr <- as.data.frame(t(expr))
colnames(tot)[1] <-"ID"
library(dplyr)
wow <- inner_join(tot,expr,by="ID")
bar <- cbind(as.data.frame(wow$risk),as.data.frame(wow$ENSG00000156738),as.data.frame(wow$ENSG00000211896),as.data.frame(wow$ENSG00000177455),as.data.frame(wow$ENSG00000153563),as.data.frame(wow$ENSG00000010610),as.data.frame(wow$ENSG00000167286),as.data.frame(wow$ENSG00000163599),as.data.frame(wow$ENSG00000181847),as.data.frame(wow$ENSG00000188389),as.data.frame(wow$ENSG00000135077),as.data.frame(wow$ENSG00000089692))
colnames(bar)<- c("risk","MS4A1","IGHG1","CD19","CD8A","CD4","CD3D","CTLA4","TIGIT","PDCD1","TIM3","LAG3")
if (! require("Seurat")){
  install.packages('Seurat')
  library(Seurat)
} else{
  library(Seurat)
}
# loading plyr
if (! require(plyr)){
  install.packages("plyr")
  library(plyr)
} else{
  library(plyr)
}

library(ggplot2)
molecules <- as.data.frame(t(bar[,-1]))
dim(molecules)
obj <- CreateSeuratObject(counts = molecules) 
ann <- as.data.frame(bar[,1])
ann1 <- read.delim("./tung/tung/annotation.txt", header = TRUE)
rownames(ann) <- rownames(bar)
colnames(ann) <- "risk"
head(ann)
if (all(rownames(ann) %in% colnames(obj))){
  obj <- AddMetaData(obj, ann)
} else{
  warning("row names should be same to the items in object@cell.names")
}
obj <- FindVariableFeatures(
  object = obj,
  mean.function = ExpMean, #计算x轴的值的方法
  dispersion.function = LogVMR, #计算y轴的值的方法
  do.plot = F)
obj <- RunPCA(
  object = obj, 
  pc.genes = obj@tools, 
  do.print = FALSE
)
########
library(rgl)
rn <- rownames(bar)
bar <- cbind(rn,bar)
colnames(bar)[1] <- "ID"
exp_data <- bar[,-2]
pca <- as.data.frame(t(exp_data[,-1]))
pca <- apply(pca,c(1,2),as.character)
pca <- apply(pca,c(1,2),as.numeric)
pca<- prcomp(pca)
tt <- arrange(bar,bar$risk)
high_sample <- tt[1:116,1]
low_sample <- tt[117:389,1]

high_color <- rep("red", length(high_sample))
names(high_color) <- high_sample
low_color <- rep("yellow", length(low_sample))
names(low_color) <- low_sample
groups <- c(high_color, low_color)
plot3d(pca$x[,1:3], # 取前三个主成分
       xlab="Comp.1", ylab="Comp.2", zlab="Comp.3", 
       col=groups, # 按groups填充颜色
       type="s", # 画球，'p' for points, 's' for spheres, 'l' for lines, 'h' for line segments 
       size=1, #球的大小
       lwd=2, box=T)
########
install.packages('ggpubr')
install.packages('ggthemes')
install.packages('Rtsne')
library(ggpubr)
library(ggthemes)
library(Rtsne)
rn <- rownames(bar)
bar <- cbind(rn,bar)
bar <- arrange(bar,bar$risk)
colnames(bar)[1] <- "ID"
rownames(bar) <- bar[,1]

data <- as.data.frame(t(bar[,-(1:2)]))
data <- apply(data,c(1,2),as.character)
data <- apply(data,c(1,2),as.numeric)
set.seed(1)
tsne.info <- Rtsne(t(data),perplexity = 3)
head(tsne.info$Y)
colnames(tsne.info$Y) <- c("tSNE_1","tSNE_2")
tSNE.data <- data.frame(sample=colnames(data),
                        Type= c(rep("high-risk",116),rep("low-risk",273)),
                        tsne.info$Y)
ggscatter(tSNE.data,x="tSNE_1",y="tSNE_2",color = "Type",
          ellipse = F,
          size = 4,palette = c("navy","red"),
          main="") + theme_base()  #750*650

tSNE.data$MS4A1 <- as.numeric(data["MS4A1",])
ggscatter(tSNE.data,x="tSNE_1",y="tSNE_2",color = "MS4A1",
          shape = "Type",repel = T,
          size=4,alpha=0.7,main="MS4A1")+ theme_base()+ gradient_color(palette = c("#0066CC","#FFFFCC","#FF6666"))

tSNE.data$IGHG1 <- as.numeric(data["IGHG1",])
ggscatter(tSNE.data,x="tSNE_1",y="tSNE_2",color = "IGHG1",
          shape = "Type",repel = T,
          size=4,alpha=0.7,main="IGHG1")+ theme_base()+ gradient_color(palette = c("#0066CC","#FFFFCC","#FF6666"))

tSNE.data$CD19 <- as.numeric(data["CD19",])
ggscatter(tSNE.data,x="tSNE_1",y="tSNE_2",color = "CD19",
          shape = "Type",repel = T,
          size=4,alpha=0.7,main="CD19")+ theme_base()+ gradient_color(palette = c("#0066CC","#FFFFCC","#FF6666"))

tSNE.data$CD8A <- as.numeric(data["CD8A",])
ggscatter(tSNE.data,x="tSNE_1",y="tSNE_2",color = "CD8A",
          shape = "Type",repel = T,
          size=4,alpha=0.7,main="CD8A")+ theme_base()+ gradient_color(palette = c("#0066CC","#FFFFCC","#FF6666"))

tSNE.data$CD4 <- as.numeric(data["CD4",])
ggscatter(tSNE.data,x="tSNE_1",y="tSNE_2",color = "CD4",
          shape = "Type",repel = T,
          size=4,alpha=0.7,main="CD4")+ theme_base()+ gradient_color(palette = c("#0066CC","#FFFFCC","#FF6666"))

tSNE.data$CD3D <- as.numeric(data["CD3D",])
ggscatter(tSNE.data,x="tSNE_1",y="tSNE_2",color = "CD3D",
          shape = "Type",repel = T,
          size=4,alpha=0.7,main="CD3D")+ theme_base()+ gradient_color(palette = c("#0066CC","#FFFFCC","#FF6666"))

tSNE.data$CTLA4 <- as.numeric(data["CTLA4",])
ggscatter(tSNE.data,x="tSNE_1",y="tSNE_2",color = "CTLA4",
          shape = "Type",repel = T,
          size=4,alpha=0.7,main="CTLA4")+ theme_base()+ gradient_color(palette = c("#0066CC","#FFFFCC","#FF6666"))

tSNE.data$CTLA4 <- as.numeric(data["CTLA4",])
ggscatter(tSNE.data,x="tSNE_1",y="tSNE_2",color = "CTLA4",
          shape = "Type",repel = T,
          size=4,alpha=0.7,main="CTLA4")+ theme_base()+ gradient_color(palette = c("#0066CC","#FFFFCC","#FF6666"))

tSNE.data$TIGIT <- as.numeric(data["TIGIT",])
ggscatter(tSNE.data,x="tSNE_1",y="tSNE_2",color = "TIGIT",
          shape = "Type",repel = T,
          size=4,alpha=0.7,main="TIGIT")+ theme_base()+ gradient_color(palette = c("#0066CC","#FFFFCC","#FF6666"))

tSNE.data$PDCD1 <- as.numeric(data["PDCD1",])
ggscatter(tSNE.data,x="tSNE_1",y="tSNE_2",color = "PDCD1",
          shape = "Type",repel = T,
          size=4,alpha=0.7,main="PDCD1")+ theme_base()+ gradient_color(palette = c("#0066CC","#FFFFCC","#FF6666"))

tSNE.data$TIM3 <- as.numeric(data["TIM3",])
ggscatter(tSNE.data,x="tSNE_1",y="tSNE_2",color = "TIM3",
          shape = "Type",repel = T,
          size=4,alpha=0.7,main="TIM3")+ theme_base()+ gradient_color(palette = c("#0066CC","#FFFFCC","#FF6666"))

tSNE.data$LAG3 <- as.numeric(data["LAG3",])
ggscatter(tSNE.data,x="tSNE_1",y="tSNE_2",color = "LAG3",
          shape = "Type",repel = T,
          size=4,alpha=0.7,main="LAG3")+ theme_base()+ gradient_color(palette = c("#0066CC","#FFFFCC","#FF6666"))
##########
install.packages("timeROC")
library(timeROC)
pbc <- read.csv("zy_h3k27me1.csv",header = T)
ROC.bili.aalen<-timeROC(T=pbc$months,
                        delta=pbc$status,marker=pbc$H3K27me3CA,
                        cause=1,weighting="cox",
                        times=c(18,24,30,36,48))
ROC.bili.aalen
plot(ROC.bili.aalen,time=18,col="yellow",add=TRUE,lwd=2,lty=1)
plot(ROC.bili.aalen,time=24,lwd=2,title=F)
plot(ROC.bili.aalen,time=30,col="green",add=TRUE,lwd=2,lty=1)
plot(ROC.bili.aalen,time=36,col="blue",add=TRUE,lwd=2,lty=1)
plot(ROC.bili.aalen,time=48,col="purple",add=TRUE,lwd=2,lty=1)
legend("bottomright",c("18 years: 64%","24 months: 62%","30 months: 63%","36 months:0.65%","48 months:0.64%"),
       col=c("yellow","red","green","blue","purple"),lty=1)  ###(700*650)
###
ROC.bili.aalen1<-timeROC(T=pbc$months,
                        delta=pbc$status,marker=pbc$age,
                        cause=1,weighting="cox",
                        times=c(18,24,30,36,48))
ROC.bili.aalen1
plot(ROC.bili.aalen1,time=18,col="yellow",add=TRUE,lwd=2,lty=1)
plot(ROC.bili.aalen1,time=24,lwd=2,title=F)
plot(ROC.bili.aalen1,time=30,col="green",add=TRUE,lwd=2,lty=1)
plot(ROC.bili.aalen1,time=36,col="blue",add=TRUE,lwd=2,lty=1)
plot(ROC.bili.aalen1,time=48,col="purple",add=TRUE,lwd=2,lty=1)
legend("bottomright",c("18 years: 64%","24 months: 62%","30 months: 63%","36 months:0.65%","48 months:0.64%"),
       col=c("yellow","red","green","blue","purple"),lty=1)  ###(700*650)
###############3
a<-c("ENSG00000177455","ENSG00000181617","ENSG00000163534","ENSG00000132185","ENSG00000259384","ENSG00000171431","ENSG00000117322","ENSG00000240505","ENSG00000104921","ENSG00000163631","ENSG00000136573","ENSG00000188822","ENSG00000156738")
exprr <- expr[a,]
rownames(exprr) <- c("CD19","FDCSP","FCRL1","FCRLA","GH1","KRT20","CR2","TNFRSF13B","FCER2","ALB","BLK","CNR2","MS4A1")
par(bg = "#fdfdfd")

# 左下角
panel.raters <- function (x, y, corr = NULL, ...) {
  if (!is.null(corr)) 
    return()
  plot.xy(xy.coords(x, y), type = "p", 
          pch = 20, #点形状
          cex = .5, #点大小
          ...)
  abline(lm(y ~ x), lwd = 2) #画拟合线
  box(col = "black", lwd = 2) #黑色粗边框
}

# 对角线
textPanel <- function (x = 0.5, y = 0.5, txt, cex, font) {
  text(x, y, txt, cex = cex, font = font)
  box(col = "black", lwd = 2)
}

# 右上角
panel.fill.cor <- function (x, y, corr = NULL, ...) 
{
  # 计算相关系数
  corr <- round(cor(x, y, use = "pairwise", method = "pearson"),2) # 可以换成"kendall"或 "spearman"
  
  # 自定义背景颜色
  ncol <- 14
  col.regions <- colorRampPalette(c('darkslateblue', 'navy', 'white', 'firebrick3', 'red'))
  pal <- col.regions(ncol)
  col.ind <- as.numeric(cut(corr, breaks = seq(from = -1, to = 1, length.out = ncol + 1), include.lowest = TRUE))
  
  # 画背景
  par(new=TRUE)
  plot(0, type='n', xlim=c(-1,1), ylim=c(-1,1), axes=FALSE, asp=1)
  usr <- par("usr")
  rect(usr[1], usr[3], usr[2], usr[4], col = pal[col.ind], 
       border = NA)
  
  # 写相关系数
  text(0, 0, labels = corr, cex = 1.5, col = ifelse(corr > 0, "black", "white"))
  box(col = "black") #黑色窄边框
}

# 画图并保存到pdf文件

pairs(df[1:13], 
      gap = .2, #小图之间的空隙
      text.panel = textPanel, #对角线
      lower.panel = panel.raters, #左下角
      upper.panel = panel.fill.cor) #右上角
